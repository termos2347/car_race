// –°–ê–ú–û–õ–ï–¢ (–ø—Ä–∏–µ–º–Ω–∏–∫) - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Actuators/ServoManager.h"
#include "Communication/ESPNowManager.h"

ServoManager servoManager;

// MAC –∞–¥—Ä–µ—Å –ø—É–ª—å—Ç–∞ (–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞)
const uint8_t transmitterMac[] = {0xEC, 0xE3, 0x34, 0x19, 0x23, 0xD4};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
static ControlData lastReceivedData;
static bool newDataReceived = false;
static unsigned long lastDataTime = 0;

// –¢–∞–π–º–∏–Ω–≥–∏ (–≤ –º—Å)
enum Timing {
  DATA_RECEIVE_TIMEOUT = 1000,    // –¢–∞–π–º–∞—É—Ç –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏
  SERIAL_PRINT_INTERVAL = 5000,   // –í—ã–≤–æ–¥ –≤ Serial
  LED_BLINK_INTERVAL = 2000,      // –ú–∏–≥–∞–Ω–∏–µ LED –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
  LED_INDICATION_TIME = 25        // –ö–æ—Ä–æ—Ç–∫–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
static unsigned long lastSerialPrint = 0;
static unsigned long lastBlinkTime = 0;
static unsigned long ledOffTime = 0;
static bool ledState = false;
static bool connectionStatus = false;

// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–û - –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
bool addPeer(const uint8_t* macAddress);
void optimizedDeviceInfo();
void handleDataProcessing();
void handleLEDIndication(unsigned long currentMillis);
void handleSerialOutput(unsigned long currentMillis);
void handleConnectionCheck(unsigned long currentMillis);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞ –≤ ESP-NOW
bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    esp_err_t result = esp_now_add_peer(&peerInfo);
    return result == ESP_OK;
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
void optimizedDeviceInfo() {
  Serial.println("‚úàÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª–µ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω–∞");
  Serial.print("MAC: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Free RAM: ");
  Serial.println(ESP.getFreeHeap());
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫)
void onControlDataReceived(const ControlData& data) {
    lastReceivedData = data;
    newDataReceived = true;
    lastDataTime = millis();
    
    // –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    digitalWrite(2, HIGH);
    ledState = true;
    ledOffTime = millis() + LED_INDICATION_TIME;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
    static ControlData lastPrintedData;
    const int PRINT_DEADZONE = 5;
    
    if (abs(data.xAxis1 - lastPrintedData.xAxis1) > PRINT_DEADZONE ||
        abs(data.yAxis1 - lastPrintedData.yAxis1) > PRINT_DEADZONE) {
        Serial.printf("üì• –î–∞–Ω–Ω—ã–µ: X=%4d, Y=%4d\n", data.xAxis1, data.yAxis1);
        lastPrintedData = data;
    }
}

void setup() {
  Serial.begin(115200);
  delay(800);  // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  
  Serial.println("‚úàÔ∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª–µ—Ç–æ–º...");
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  optimizedDeviceInfo();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LED –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
  pinMode(2, OUTPUT);
  digitalWrite(2, LOW);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  servoManager.begin();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi –∏ ESP-NOW
  WiFi.mode(WIFI_STA);
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è WiFi –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
  WiFi.setSleep(true);
  WiFi.setTxPower(WIFI_POWER_19_5dBm);
  
  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
    return;
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  esp_now_register_recv_cb([](const uint8_t *mac, const uint8_t *incomingData, int len) {
    if (len == sizeof(ControlData)) {
      ControlData data;
      memcpy(&data, incomingData, sizeof(ControlData));
      onControlDataReceived(data);
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Ç –∫–∞–∫ –ø–∏—Ä
  if (addPeer(transmitterMac)) {
    Serial.println("‚úÖ –ü—É–ª—å—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
    connectionStatus = true;
  } else {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–ª—å—Ç–∞");
    connectionStatus = false;
  }
  
  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤
  servoManager.calibrate();
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è)
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(80);
    digitalWrite(2, LOW);
    delay(80);
  }
  
  Serial.println("üöÄ –°–∞–º–æ–ª–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
}

void loop() {
  const unsigned long currentMillis = millis();

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
  handleDataProcessing();
  handleLEDIndication(currentMillis);
  handleSerialOutput(currentMillis);
  handleConnectionCheck(currentMillis);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
void handleDataProcessing() {
  if (newDataReceived) {
    servoManager.update(lastReceivedData);
    newDataReceived = false;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
void handleLEDIndication(unsigned long currentMillis) {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (ledState && currentMillis > ledOffTime) {
    digitalWrite(2, LOW);
    ledState = false;
  }
  
  // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
  if (!ledState && currentMillis - lastDataTime > DATA_RECEIVE_TIMEOUT) {
    if (currentMillis - lastBlinkTime > LED_BLINK_INTERVAL) {
      digitalWrite(2, !digitalRead(2));
      lastBlinkTime = currentMillis;
    }
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º –≤ Serial
void handleSerialOutput(unsigned long currentMillis) {
  if (currentMillis - lastSerialPrint >= SERIAL_PRINT_INTERVAL) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
    bool peerExists = esp_now_is_peer_exist(transmitterMac);
    
    if (peerExists) {
      if (currentMillis - lastDataTime < DATA_RECEIVE_TIMEOUT) {
        Serial.println("‚úÖ –°–≤—è–∑—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç");
      } else {
        Serial.println("‚ö†Ô∏è  –ü—É–ª—å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç");
      }
    } else {
      Serial.println("‚ùå –ü—É–ª—å—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    }
    
    lastSerialPrint = currentMillis;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
void handleConnectionCheck(unsigned long currentMillis) {
  static unsigned long lastConnectionCheck = 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
  if (currentMillis - lastConnectionCheck > 10000) {
    bool currentStatus = esp_now_is_peer_exist(transmitterMac);
    
    if (currentStatus != connectionStatus) {
      connectionStatus = currentStatus;
      if (connectionStatus) {
        Serial.println("üîó –ü—É–ª—å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω");
      } else {
        Serial.println("üîå –ü—É–ª—å—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
      }
    }
    
    lastConnectionCheck = currentMillis;
  }
}