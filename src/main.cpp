// –°–ê–ú–û–õ–ï–¢ (–ø—Ä–∏–µ–º–Ω–∏–∫) - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
#include <WiFi.h>
#include "Core/Types.h"
#include "Actuators/ServoManager.h"
#include "Communication/ESPNowManager.h"

ServoManager servoManager;
ESPNowManager& espNowManager = ESPNowManager::getInstance();

const uint8_t transmitterMac[] = {0x14, 0x33, 0x5C, 0x37, 0x82, 0x58};

static ControlData currentData;
static unsigned long lastDataTime = 0;
static bool dataReceived = false;
static unsigned long lastDebugTime = 0;

void onDataReceived(const ControlData& data) {
    currentData = data;
    lastDataTime = millis();
    dataReceived = true;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∂–æ–π—Å—Ç–∏–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞)
    if (millis() - lastDebugTime > 200) {
        servoManager.debugJoystick(data);
        lastDebugTime = millis();
    }
    
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ï–†–í–û–ü–†–ò–í–û–î–ê –ò –ú–û–¢–û–†–ê
    servoManager.update(currentData);
    
    digitalWrite(2, HIGH);
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("\n\n‚úàÔ∏è –°–ê–ú–û–õ–ï–¢ –ó–ê–ü–£–©–ï–ù");
    Serial.println("========================================");
    
    pinMode(2, OUTPUT);
    digitalWrite(2, LOW);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager
    servoManager.begin();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW
    espNowManager.begin();
    espNowManager.registerCallback(onDataReceived);
    
    if (espNowManager.addPeer(transmitterMac)) {
        Serial.println("‚úÖ –ü—É–ª—å—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–ª—å—Ç–∞");
    }
    
    Serial.println("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
    Serial.println("========================================");
}

void loop() {
    unsigned long currentMillis = millis();
    
    // –í—ã–∫–ª—é—á–∞–µ–º LED —á–µ—Ä–µ–∑ 50–º—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (currentMillis - lastDataTime > 50) {
        digitalWrite(2, LOW);
    }
    
    // –ê–≤—Ç–æ-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (dataReceived && currentMillis - lastDataTime < 100) {
        static bool firstData = true;
        if (firstData) {
            firstData = false;
            Serial.println("‚úÖ –ü–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞");
            servoManager.quickCalibrate();  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        }
    }
    
    // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö > 2 —Å–µ–∫
    if (currentMillis - lastDataTime > 2000) {
        static unsigned long lastBlink = 0;
        if (currentMillis - lastBlink > 500) {
            digitalWrite(2, !digitalRead(2));
            lastBlink = currentMillis;
            
            static bool connectionWarning = false;
            if (!connectionWarning) {
                Serial.println("‚ö†Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—É–ª—å—Ç–∞...");
                connectionWarning = true;
            }
        }
    }
    
    // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–≤—è–∑–∏ > 3 —Å–µ–∫
    if (currentMillis - lastDataTime > 3000) {
        static unsigned long lastEmergencyPrint = 0;
        if (currentMillis - lastEmergencyPrint > 2000) {
            Serial.println("üõë –ü–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ —Å –ø—É–ª—å—Ç–æ–º - –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º");
            lastEmergencyPrint = currentMillis;
        }
        servoManager.emergencyStop();
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    delay(2);
}