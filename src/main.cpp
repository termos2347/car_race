// –°–ê–ú–û–õ–ï–¢ (–ø—Ä–∏–µ–º–Ω–∏–∫) - –° –ê–í–¢–û–¢–ï–°–¢–û–ú –°–ï–†–í–û–ü–†–ò–í–û–î–ê
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Actuators/ServoManager.h"

#define DEBUG_MODE true

ServoManager servoManager;
const uint8_t transmitterMac[] = {0xEC, 0xE3, 0x34, 0x19, 0x23, 0xD4};

static ControlData currentData;
static unsigned long lastDataTime = 0;
static unsigned long lastBlinkTime = 0;
static unsigned long ledOffTime = 0;
static bool ledState = false;

enum Timing {
  LED_BLINK_INTERVAL = 2000,
  LED_INDICATION_TIME = 25
};

void printMacAddress(const uint8_t* mac, const char* label) {
  #if DEBUG_MODE
    Serial.printf("%s: %02X:%02X:%02X:%02X:%02X:%02X\n", 
                 label, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  #endif
}

bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    return esp_now_add_peer(&peerInfo) == ESP_OK;
}

void onDataReceived(const ControlData& data) {
    currentData = data;
    lastDataTime = millis();
    
    digitalWrite(2, HIGH);
    ledState = true;
    ledOffTime = millis() + LED_INDICATION_TIME;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC
    uint16_t calculatedCRC = 0;
    const uint8_t* bytes = (const uint8_t*)&data;
    for(size_t i = 0; i < sizeof(ControlData) - sizeof(uint16_t); i++) {
        calculatedCRC += bytes[i];
    }
    
    if (calculatedCRC == data.crc) {
      // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å
      servoManager.update(currentData);
      
      #if DEBUG_MODE
        static unsigned long lastDataPrint = 0;
        if (millis() - lastDataPrint > 200) {
          Serial.printf("üì° X1:%4d (—Å–µ—Ä–≤–æ) | Y1:%4d (–¥–≤–∏–≥–∞—Ç–µ–ª—å)\n", data.xAxis1, data.yAxis1);
          lastDataPrint = millis();
        }
      #endif
    } else {
      #if DEBUG_MODE
        Serial.println("‚ùå –û—à–∏–±–∫–∞ CRC");
      #endif
    }
}

void setup() {
  #if DEBUG_MODE
    Serial.begin(115200);
    delay(500);
    Serial.println("‚úàÔ∏è –°–ê–ú–û–õ–ï–¢ –ó–ê–ü–£–©–ï–ù (1 —Å–µ—Ä–≤ + 1 –¥–≤–∏–≥–∞—Ç–µ–ª—å)");
    Serial.println("========================");
  #endif
  
  // –í—ã–≤–æ–¥ MAC-–∞–¥—Ä–µ—Å–æ–≤
  #if DEBUG_MODE
    Serial.print("MAC —Å–∞–º–æ–ª–µ—Ç–∞:  ");
    Serial.println(WiFi.macAddress());
    printMacAddress(transmitterMac, "MAC –ø—É–ª—å—Ç–∞  ");
    Serial.println("------------------------");
  #endif
  
  pinMode(2, OUTPUT);
  
  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê
  #if DEBUG_MODE
    Serial.println("üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
  #endif
  servoManager.begin();
  
  // –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –°–†–ê–ó–£ –ü–û–°–õ–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
  #if DEBUG_MODE
    Serial.println("üéØ –ó–ê–ü–£–°–ö –ê–í–¢–û–¢–ï–°–¢–ê –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
    delay(100); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
  #endif
  servoManager.testSequence();
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  #if DEBUG_MODE
    Serial.println("üì° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ESP-NOW...");
  #endif
  
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    #if DEBUG_MODE
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
    #endif
    return;
  }
  
  esp_now_register_recv_cb([](const uint8_t *mac, const uint8_t *incomingData, int len) {
    if (len == sizeof(ControlData)) {
      ControlData data;
      memcpy(&data, incomingData, sizeof(ControlData));
      onDataReceived(data);
    }
  });
  
  if (addPeer(transmitterMac)) {
    #if DEBUG_MODE
      Serial.println("‚úÖ –ü—É–ª—å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∏—Ä—ã");
    #endif
  } else {
    #if DEBUG_MODE
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–ª—å—Ç–∞");
    #endif
  }
  
  // –ë—ã—Å—Ç—Ä–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
  servoManager.quickCalibrate();
  
  #if DEBUG_MODE
    Serial.println("üöÄ –°–∞–º–æ–ª–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    Serial.println("   X1 - —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥, Y1 - –¥–≤–∏–≥–∞—Ç–µ–ª—å");
    Serial.println("========================");
  #endif
}

void loop() {
  unsigned long currentMillis = millis();
  
  // LED –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (ledState && currentMillis > ledOffTime) {
    digitalWrite(2, LOW);
    ledState = false;
  }
  
  // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  if (!ledState && currentMillis - lastDataTime > 1000) {
    if (currentMillis - lastBlinkTime > LED_BLINK_INTERVAL) {
      digitalWrite(2, !digitalRead(2));
      lastBlinkTime = currentMillis;
    }
  }
}