// –°–ê–ú–û–õ–ï–¢ (–ø—Ä–∏–µ–º–Ω–∏–∫) - –° DEBUG –†–ï–ñ–ò–ú–û–ú
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Actuators/ServoManager.h"
#include "Communication/ESPNowManager.h"

// === –ù–ê–°–¢–†–û–ô–ö–ò DEBUG ===
#define DEBUG_MODE true  // true - –æ—Ç–ª–∞–¥–∫–∞, false - –ø–æ–ª–µ—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)
// =======================

ServoManager servoManager;

// MAC –∞–¥—Ä–µ—Å –ø—É–ª—å—Ç–∞ (–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞)
const uint8_t transmitterMac[] = {0xEC, 0xE3, 0x34, 0x19, 0x23, 0xD4};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
static ControlData currentData;
static bool newDataReceived = false;
static unsigned long lastDataTime = 0;

// –¢–∞–π–º–∏–Ω–≥–∏ (–≤ –º—Å)
enum Timing {
  DATA_PROCESS_INTERVAL = 30,     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  STATUS_PRINT_INTERVAL = 1000,   // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
  LED_BLINK_INTERVAL = 2000,      // –ú–∏–≥–∞–Ω–∏–µ LED –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
  LED_INDICATION_TIME = 25        // –ò–Ω–¥–∏–∫–∞—Ü–∏—è LED
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
static unsigned long lastDataProcess = 0;
static unsigned long lastStatusPrint = 0;
static unsigned long lastBlinkTime = 0;
static unsigned long ledOffTime = 0;
static bool ledState = false;
static bool connectionStatus = false;

// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
bool addPeer(const uint8_t* macAddress);
void printDeviceInfo();
void setupIndication();
void handleDataProcessing(unsigned long currentMillis);
void handleLEDIndication(unsigned long currentMillis);
void handleStatusOutput(unsigned long currentMillis);
void handleConnectionCheck(unsigned long currentMillis);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞ –≤ ESP-NOW
bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    return esp_now_add_peer(&peerInfo) == ESP_OK;
}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
void printDeviceInfo() {
  #if DEBUG_MODE
    Serial.println("‚úàÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª–µ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω–∞");
    Serial.print("MAC: ");
    Serial.println(WiFi.macAddress());
    Serial.print("Free RAM: ");
    Serial.println(ESP.getFreeHeap());
  #endif
}

// –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
void setupIndication() {
  pinMode(2, OUTPUT);
  for(int i = 0; i < 3; i++) {
    digitalWrite(2, HIGH);
    delay(80);
    digitalWrite(2, LOW);
    delay(80);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
void onDataReceived(const ControlData& data) {
    currentData = data;
    newDataReceived = true;
    lastDataTime = millis();
    
    // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    digitalWrite(2, HIGH);
    ledState = true;
    ledOffTime = millis() + LED_INDICATION_TIME;
    
    // –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
    #if DEBUG_MODE
      static unsigned long lastDataPrint = 0;
      if (millis() - lastDataPrint > 100) {
          Serial.printf("J1:%4d,%4d J2:%4d,%4d B1:%d B2:%d CRC:%4d\n", 
                       data.xAxis1, data.yAxis1, 
                       data.xAxis2, data.yAxis2,
                       data.button1, data.button2, data.crc);
          lastDataPrint = millis();
      }
    #endif
}

void setup() {
  #if DEBUG_MODE
    Serial.begin(115200);
    delay(800);
    Serial.println("‚úàÔ∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª–µ—Ç–æ–º...");
  #endif
  
  printDeviceInfo();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LED –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
  setupIndication();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  servoManager.begin();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi –∏ ESP-NOW
  WiFi.mode(WIFI_STA);
  WiFi.setSleep(true);
  WiFi.setTxPower(WIFI_POWER_19_5dBm);
  
  if (esp_now_init() != ESP_OK) {
    #if DEBUG_MODE
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
    #endif
    return;
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  esp_now_register_recv_cb([](const uint8_t *mac, const uint8_t *incomingData, int len) {
    if (len == sizeof(ControlData)) {
      ControlData data;
      memcpy(&data, incomingData, sizeof(ControlData));
      onDataReceived(data);
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Ç –∫–∞–∫ –ø–∏—Ä
  if (addPeer(transmitterMac)) {
    #if DEBUG_MODE
      Serial.println("‚úÖ –ü—É–ª—å—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
    #endif
    connectionStatus = true;
  } else {
    #if DEBUG_MODE
      Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–ª—å—Ç–∞");
    #endif
    connectionStatus = false;
  }
  
  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤
  #if DEBUG_MODE
    servoManager.calibrate();
  #else
    // –í —Ä–µ–∂–∏–º–µ –ø–æ–ª–µ—Ç–∞ - –±—ã—Å—Ç—Ä–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞
    for(int i = 0; i < 8; i++) {
      servoManager.servos[i].servo.writeMicroseconds(1500);
    }
    delay(100);
  #endif
  
  #if DEBUG_MODE
    Serial.println("üöÄ –°–∞–º–æ–ª–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
  #endif
}

void loop() {
  const unsigned long currentMillis = millis();
  
  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
  handleDataProcessing(currentMillis);
  handleLEDIndication(currentMillis);
  handleStatusOutput(currentMillis);
  handleConnectionCheck(currentMillis);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
void handleDataProcessing(unsigned long currentMillis) {
  if (currentMillis - lastDataProcess >= DATA_PROCESS_INTERVAL) {
    if (newDataReceived) {
      servoManager.update(currentData);
      newDataReceived = false;
    }
    lastDataProcess = currentMillis;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
void handleLEDIndication(unsigned long currentMillis) {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (ledState && currentMillis > ledOffTime) {
    digitalWrite(2, LOW);
    ledState = false;
  }
  
  // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
  if (!ledState && currentMillis - lastDataTime > 1000) {
    if (currentMillis - lastBlinkTime > LED_BLINK_INTERVAL) {
      digitalWrite(2, !digitalRead(2));
      lastBlinkTime = currentMillis;
    }
  }
}

// –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
void handleStatusOutput(unsigned long currentMillis) {
  #if DEBUG_MODE
    if (currentMillis - lastStatusPrint >= STATUS_PRINT_INTERVAL) {
      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      if (currentMillis - lastDataTime > STATUS_PRINT_INTERVAL - 500) {
        if (connectionStatus) {
          if (currentMillis - lastDataTime < 2000) {
            Serial.println("‚úÖ –°–≤—è–∑—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç");
          } else {
            Serial.println("‚ö†Ô∏è  –ü—É–ª—å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç");
          }
        } else {
          Serial.println("‚ùå –ü—É–ª—å—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        }
      }
      lastStatusPrint = currentMillis;
    }
  #endif
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
void handleConnectionCheck(unsigned long currentMillis) {
  #if DEBUG_MODE
    static unsigned long lastConnectionCheck = 0;
    
    if (currentMillis - lastConnectionCheck > 10000) {
      bool currentStatus = esp_now_is_peer_exist(transmitterMac);
      
      if (currentStatus != connectionStatus) {
        connectionStatus = currentStatus;
        if (connectionStatus) {
          Serial.println("üîó –ü—É–ª—å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω");
        } else {
          Serial.println("üîå –ü—É–ª—å—Ç –æ—Ç–∫–ª—é—á–µ–Ω");
        }
      }
      lastConnectionCheck = currentMillis;
    }
  #endif
}