// –°–ê–ú–û–õ–ï–¢ (–ø—Ä–∏–µ–º–Ω–∏–∫) - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø SG90
#include <esp_now.h>
#include <WiFi.h>
#include "Core/Types.h"
#include "Actuators/ServoManager.h"

ServoManager servoManager;
const uint8_t transmitterMac[] = {0xEC, 0xE3, 0x34, 0x19, 0x23, 0xD4};

static ControlData currentData;
static unsigned long lastDataTime = 0;

void onDataReceived(const ControlData& data) {
    currentData = data;
    lastDataTime = millis();
    
    // –°–†–ê–ó–£ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥
    servoManager.update(currentData);
    
    digitalWrite(2, HIGH);
}

bool addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    return esp_now_add_peer(&peerInfo) == ESP_OK;
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("‚úàÔ∏è –°–ê–ú–û–õ–ï–¢ –ó–ê–ü–£–©–ï–ù (SG90 —Å –ø—Ä—è–º—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º)");
    Serial.println("========================");
    
    pinMode(2, OUTPUT);
    digitalWrite(2, LOW);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞ SG90
    Serial.println("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞ SG90...");
    servoManager.begin();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW
    Serial.println("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW...");
    
    WiFi.mode(WIFI_STA);
    
    if (esp_now_init() != ESP_OK) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
        while(1) delay(1000);
    }
    
    esp_now_register_recv_cb([](const uint8_t *mac, const uint8_t *incomingData, int len) {
        if (len == sizeof(ControlData)) {
            ControlData data;
            memcpy(&data, incomingData, sizeof(ControlData));
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CRC
            uint16_t calculatedCRC = 0;
            const uint8_t* bytes = (const uint8_t*)&data;
            for(size_t i = 0; i < sizeof(ControlData) - sizeof(uint16_t); i++) {
                calculatedCRC += bytes[i];
            }
            
            if (calculatedCRC == data.crc) {
                onDataReceived(data);
            }
        }
    });
    
    if (addPeer(transmitterMac)) {
        Serial.println("‚úÖ –ü—É–ª—å—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–ª—å—Ç–∞");
    }
    
    Serial.println("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
    Serial.println("   Y1 - —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ (-512=0¬∞, 512=180¬∞)");
    Serial.println("   X1 - –¥–≤–∏–≥–∞—Ç–µ–ª—å");
    Serial.println("========================");
    
    // –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ê –î–ñ–û–ô–°–¢–ò–ö–ê
    Serial.println("üéÆ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –¥–∂–æ–π—Å—Ç–∏–∫ –ø–æ –æ—Å–∏ Y...");
}

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∂–æ–π—Å—Ç–∏–∫–∞
void debugJoystickValues(const ControlData& data) {
    static unsigned long lastDebug = 0;
    static int lastY1 = 0;
    
    if (millis() - lastDebug > 200 && abs(data.yAxis1 - lastY1) > 10) {
        int angle = map(data.yAxis1, -512, 512, 0, 180);
        Serial.printf("üîç –î–ñ–û–ô–°–¢–ò–ö: Y1=%-4d ‚Üí —É–≥–æ–ª=%-3d¬∞\n", data.yAxis1, angle);
        lastY1 = data.yAxis1;
        lastDebug = millis();
    }
}

void loop() {
    unsigned long currentMillis = millis();
    
    // –í—ã–∫–ª—é—á–∞–µ–º LED —á–µ—Ä–µ–∑ 100–º—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (currentMillis - lastDataTime > 100) {
        digitalWrite(2, LOW);
    }
    
    // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (currentMillis - lastDataTime > 2000) {
        static unsigned long lastBlink = 0;
        if (currentMillis - lastBlink > 500) {
            digitalWrite(2, !digitalRead(2));
            lastBlink = currentMillis;
        }
    }
    
    // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    if (currentMillis - lastDataTime > 3000) {
        servoManager.emergencyStop();
    }
    
    delay(20);
}