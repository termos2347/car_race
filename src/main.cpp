// –°–ê–ú–û–õ–ï–¢ (–ø—Ä–∏–µ–º–Ω–∏–∫) - –ü–†–Ø–ú–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï
#include <WiFi.h>
#include "Core/Types.h"
#include "Actuators/ServoManager.h"
#include "Communication/ESPNowManager.h"

ServoManager servoManager;
ESPNowManager& espNowManager = ESPNowManager::getInstance();

const uint8_t transmitterMac[] = {0xEC, 0xE3, 0x34, 0x19, 0x23, 0xD4};

static ControlData currentData;
static unsigned long lastDataTime = 0;

void onDataReceived(const ControlData& data) {
    currentData = data;
    lastDataTime = millis();
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    servoManager.update(currentData);
    
    digitalWrite(2, HIGH);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞)
    static unsigned long lastDebug = 0;
    if (millis() - lastDebug > 100) {
        Serial.printf("üéØ Y1:%-4d ‚Üí PWM:%-3d\n", data.yAxis1, data.xAxis1);
        lastDebug = millis();
    }
}

void setup() {
    Serial.begin(115200);
    delay(500);
    Serial.println("‚úàÔ∏è –°–ê–ú–û–õ–ï–¢ –ó–ê–ü–£–©–ï–ù (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç ESPNowManager)");
    Serial.println("========================");
    
    pinMode(2, OUTPUT);
    digitalWrite(2, LOW);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    Serial.println("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    servoManager.begin();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    Serial.println("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESP-NOW —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä...");
    espNowManager.begin();
    espNowManager.registerCallback(onDataReceived);
    
    if (espNowManager.addPeer(transmitterMac)) {
        Serial.println("‚úÖ –ü—É–ª—å—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä");
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–ª—å—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä");
    }
    
    Serial.println("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
    Serial.println("   Y1: -512=0¬∞, 0=90¬∞, 512=180¬∞");
    Serial.println("   X1: –¥–≤–∏–≥–∞—Ç–µ–ª—å");
    Serial.println("========================");
}

void loop() {
    unsigned long currentMillis = millis();
    
    // –í—ã–∫–ª—é—á–∞–µ–º LED —á–µ—Ä–µ–∑ 50–º—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (currentMillis - lastDataTime > 50) {
        digitalWrite(2, LOW);
    }
    
    // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (currentMillis - lastDataTime > 2000) {
        static unsigned long lastBlink = 0;
        if (currentMillis - lastBlink > 500) {
            digitalWrite(2, !digitalRead(2));
            lastBlink = currentMillis;
        }
    }
    
    // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–≤—è–∑–∏
    if (currentMillis - lastDataTime > 3000) {
        servoManager.emergencyStop();
    }
    
    // –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
    delay(1);
}