#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è ESP32Servo
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    ESP32PWM::allocateTimer(2);
    ESP32PWM::allocateTimer(3);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    elevatorServo.setPeriodHertz(50);
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        servoAttached = true;
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        
        // –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢
        Serial.println("üß™ –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê:");
        
        Serial.println("‚û°Ô∏è  0¬∞");
        elevatorServo.write(0);
        delay(800);
        
        Serial.println("‚û°Ô∏è  90¬∞ (–Ω–µ–π—Ç—Ä–∞–ª—å)");
        elevatorServo.write(90);
        delay(800);
        
        Serial.println("‚û°Ô∏è  180¬∞");
        elevatorServo.write(180);
        delay(800);
        
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        elevatorServo.write(90);
        delay(500);
        
        Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    } else {
        Serial.println("‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        servoAttached = false;
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–∞
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ú–æ—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    Serial.println("‚úÖ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::safeServoWrite(int angle) {
    if (!servoAttached) {
        return;
    }
    
    angle = constrain(angle, 0, 180);
    elevatorServo.write(angle);
}

void ServoManager::update(const ControlData& data) {
    // –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ñ–û–ô–°–¢–ò–ö–ê –í –£–ì–û–õ –°–ï–†–í–û
    int angle = 90; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞ (-512 –¥–æ 512) –≤ —É–≥–æ–ª (0 –¥–æ 180)
    // –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ = 180¬∞, –º–∏–Ω = 0¬∞
    if (data.yAxis1 != 0) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –æ—Ç -1.0 –¥–æ 1.0
        float normalized = (float)data.yAxis1 / 512.0f;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç -1.0 –¥–æ 1.0
        normalized = constrain(normalized, -1.0f, 1.0f);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–≥–æ–ª: -1.0 ‚Üí 0¬∞, 0 ‚Üí 90¬∞, 1.0 ‚Üí 180¬∞
        angle = (int)(90.0f + (normalized * 90.0f));
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        angle = constrain(angle, 0, 180);
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º
    safeServoWrite(angle);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º —Å deadzone
    int motorPWM = 0;
    if (data.xAxis1 > JOYSTICK_DEADZONE) {
        motorPWM = map(data.xAxis1, JOYSTICK_DEADZONE, 512, 80, 255);
        motorPWM = constrain(motorPWM, 0, 255);
    }
    ledcWrite(MOTOR_CHANNEL, motorPWM);
    
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê (—Ä–∞–∑ –≤ 800 –º—Å)
    static unsigned long lastServoDebug = 0;
    if (millis() - lastServoDebug > 800) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        const char* direction;
        if (angle < 85) direction = "‚¨áÔ∏è –í–ù–ò–ó";
        else if (angle > 95) direction = "‚¨ÜÔ∏è –í–í–ï–†–•";
        else direction = "‚èπÔ∏è –ù–ï–ô–¢–†";
        
        // –°—Ç–∞—Ç—É—Å –º–æ—Ç–æ—Ä–∞
        const char* motorStatus = (motorPWM > 0) ? "üöÄ –í–ö–õ" : "‚èπÔ∏è –í–´–ö–õ";
        
        Serial.printf("üìä SERVO: %s —É–≥–æ–ª=%-3d¬∞ (Y1=%-4d) | %s PWM=%-3d (X1=%-4d)\n", 
                     direction, angle, data.yAxis1, motorStatus, motorPWM, data.xAxis1);
        lastServoDebug = millis();
    }
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ò –ö–†–ê–ô–ù–ò–• –ü–û–õ–û–ñ–ï–ù–ò–Ø–•
    static int lastAngle = -1;
    if (abs(angle - lastAngle) > 30) { // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (angle <= 5 || angle >= 175) {
            Serial.printf("üéØ –ö–†–ê–ô–ù–ï–ï –ü–û–õ–û–ñ–ï–ù–ò–ï: %d¬∞ (Y1=%d)\n", angle, data.yAxis1);
        }
        lastAngle = angle;
    }
}

void ServoManager::quickTest() {
    Serial.println("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
        return;
    }
    
    // –¢–û–õ–¨–ö–û 0, 90, 180
    int testAngles[] = {0, 90, 180, 90};
    const char* positions[] = {"–ú–ò–ù (0¬∞)", "–ù–ï–ô–¢–† (90¬∞)", "–ú–ê–ö–° (180¬∞)", "–í–û–ó–í–†–ê–¢ (90¬∞)"};
    
    for (int i = 0; i < 4; i++) {
        Serial.printf("‚û°Ô∏è  %s\n", positions[i]);
        safeServoWrite(testAngles[i]);
        delay(700);
    }
    Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::emergencyStop() {
    static unsigned long lastEmergencyCall = 0;
    unsigned long currentTime = millis();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (currentTime - lastEmergencyCall < 1000) {
        return;
    }
    lastEmergencyCall = currentTime;
    
    Serial.println("üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!");
    safeServoWrite(90); // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    ledcWrite(MOTOR_CHANNEL, 0); // –í—ã–∫–ª—é—á–∏—Ç—å –º–æ—Ç–æ—Ä
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
void ServoManager::quickCalibrate() {
    Serial.println("üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: —Å–µ—Ä–≤–æ=90¬∞, –º–æ—Ç–æ—Ä=0");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    delay(1000);
}