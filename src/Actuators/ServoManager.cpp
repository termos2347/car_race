#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è ESP32Servo
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    ESP32PWM::allocateTimer(2);
    ESP32PWM::allocateTimer(3);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    elevatorServo.setPeriodHertz(50);
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        servoAttached = true;
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        
        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        quickTest();
        currentAngle = 90;
        
    } else {
        Serial.println("‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        servoAttached = false;
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–∞
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ú–æ—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    Serial.println("üéØ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::safeServoWrite(int angle) {
    if (!servoAttached) return;
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    angle = constrain(angle, 0, 180);
    
    elevatorServo.write(angle);
    currentAngle = angle;
}

void ServoManager::update(const ControlData& data) {
    static unsigned long lastDebug = 0;
    
    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    if (millis() - lastDebug > 150) {
        debugJoystick(data);
        lastDebug = millis();
    }
    
    // –ü–†–û–°–¢–ê–Ø –ò –ü–û–ù–Ø–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê:
    // –î–∂–æ–π—Å—Ç–∏–∫ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ = 90¬∞
    // –î–∂–æ–π—Å—Ç–∏–∫ –≤–≤–µ—Ä—Ö = —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≥–æ–ª (–¥–æ 180¬∞)
    // –î–∂–æ–π—Å—Ç–∏–∫ –≤–Ω–∏–∑ = —É–º–µ–Ω—å—à–∞–µ–º —É–≥–æ–ª (–¥–æ 0¬∞)
    
    int targetAngle = 90; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–∂–æ–π—Å—Ç–∏–∫ –≤–Ω–µ –º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω—ã
    if (data.yAxis1 > JOYSTICK_DEADZONE) {
        // –î–∂–æ–π—Å—Ç–∏–∫ –û–¢ —Å–µ–±—è (–≤–≤–µ—Ä—Ö) - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≥–æ–ª
        targetAngle = map(data.yAxis1, JOYSTICK_DEADZONE, 512, 90, 180);
    } 
    else if (data.yAxis1 < -JOYSTICK_DEADZONE) {
        // –î–∂–æ–π—Å—Ç–∏–∫ –ù–ê —Å–µ–±—è (–≤–Ω–∏–∑) - —É–º–µ–Ω—å—à–∞–µ–º —É–≥–æ–ª
        targetAngle = map(data.yAxis1, -JOYSTICK_DEADZONE, -512, 90, 0);
    }
    // –ï—Å–ª–∏ –≤ –º–µ—Ä—Ç–≤–æ–π –∑–æ–Ω–µ - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ 90¬∞
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≥–æ–ª —Å—Ä–∞–∑—É
    safeServoWrite(targetAngle);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
    int motorPWM = 0;
    if (data.xAxis1 > JOYSTICK_DEADZONE) {
        motorPWM = map(data.xAxis1, JOYSTICK_DEADZONE, 512, 0, 255);
    }
    motorPWM = constrain(motorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, motorPWM);
}

void ServoManager::debugJoystick(const ControlData& data) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    const char* direction = "–ù–ï–ô–¢–†–ê–õ–¨";
    if (data.yAxis1 > JOYSTICK_DEADZONE) direction = "–í–í–ï–†–•";
    else if (data.yAxis1 < -JOYSTICK_DEADZONE) direction = "–í–ù–ò–ó";
    
    int targetAngle = 90;
    if (data.yAxis1 > JOYSTICK_DEADZONE) {
        targetAngle = map(data.yAxis1, JOYSTICK_DEADZONE, 512, 90, 180);
    } else if (data.yAxis1 < -JOYSTICK_DEADZONE) {
        targetAngle = map(data.yAxis1, -JOYSTICK_DEADZONE, -512, 90, 0);
    }
    
    Serial.printf("üéÆ Y1=%-4d %-10s -> –£–≥–æ–ª=%d¬∞ | –¢–µ–∫—É—â–∏–π=%d¬∞\n", 
                 data.yAxis1, direction, targetAngle, currentAngle);
}

void ServoManager::quickCalibrate() {
    Serial.println("üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: —Å–µ—Ä–≤–æ=90¬∞, –º–æ—Ç–æ—Ä=0");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    delay(500);
}

void ServoManager::quickTest() {
    Serial.println("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
        return;
    }
    
    Serial.println("‚û°Ô∏è  0¬∞");
    safeServoWrite(0);
    delay(500);
    
    Serial.println("‚û°Ô∏è  90¬∞");
    safeServoWrite(90);
    delay(500);
    
    Serial.println("‚û°Ô∏è  180¬∞");
    safeServoWrite(180);
    delay(500);
    
    Serial.println("‚û°Ô∏è  90¬∞");
    safeServoWrite(90);
    delay(500);
    
    Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::emergencyStop() {
    Serial.println("üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::testSequence() {
    Serial.println("üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
        return;
    }
    
    // –¢–µ—Å—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    int testAngles[] = {0, 45, 90, 135, 180, 90};
    for (int i = 0; i < 6; i++) {
        safeServoWrite(testAngles[i]);
        Serial.printf("üìç –£–≥–æ–ª: %d¬∞\n", testAngles[i]);
        delay(400);
    }
    
    Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::setServoAngle(int angle) {
    if (!servoAttached) return;
    angle = constrain(angle, 0, 180);
    safeServoWrite(angle);
    Serial.printf("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É–≥–æ–ª: %d¬∞\n", angle);
}

void ServoManager::setMotorSpeed(int speed) {
    speed = constrain(speed, 0, 255);
    ledcWrite(MOTOR_CHANNEL, speed);
    Serial.printf("üöÄ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: %d/255\n", speed);
}

bool ServoManager::isServoAttached() {
    return servoAttached;
}

void ServoManager::diagnostic() {
    Serial.println("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SERVOMANAGER:");
    Serial.printf("   –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥: %s\n", servoAttached ? "–ü–û–î–ö–õ–Æ–ß–ï–ù" : "–û–¢–ö–õ–Æ–ß–ï–ù");
    Serial.printf("   –¢–µ–∫—É—â–∏–π —É–≥–æ–ª: %d¬∞\n", currentAngle);
    Serial.printf("   Deadzone: %d\n", JOYSTICK_DEADZONE);
}