#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        elevatorServo.write(90);
        currentAngle = 90;
        delay(500);
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞!");
        return;
    }
    
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    
    Serial.println("‚úÖ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::update(const ControlData& data) {
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–û–ü–†–ò–í–û–î–û–ú –û–¢ Y1
    
    // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ä—Ç–≤—É—é –∑–æ–Ω—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    int processedY1 = data.yAxis1;
    if (abs(processedY1) < JOYSTICK_DEAD_ZONE) {
        processedY1 = 0;
    }
    
    // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –≤ —É–≥–æ–ª
    int targetAngle = map(processedY1, -512, 512, 0, 180);
    targetAngle = constrain(targetAngle, 0, 180);
    
    // 3. –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)
    int angleDiff = targetAngle - currentAngle;
    if (abs(angleDiff) > MAX_ANGLE_STEP) {
        currentAngle += (angleDiff > 0) ? MAX_ANGLE_STEP : -MAX_ANGLE_STEP;
    } else {
        currentAngle = targetAngle;
    }
    
    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —É–≥–æ–ª –∫ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—É
    elevatorServo.write(currentAngle);
    
    // 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –æ—Ç X1
    int motorPWM = 0;
    if (data.xAxis1 > MOTOR_DEAD_ZONE) {
        motorPWM = map(data.xAxis1, MOTOR_DEAD_ZONE, 512, MOTOR_MIN_PWM, 255);
    }
    motorPWM = constrain(motorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, motorPWM);
    
    // 6. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    static int lastPrintedAngle = -1;
    static int lastPrintedPWM = -1;
    
    if (abs(currentAngle - lastPrintedAngle) > 2 || abs(motorPWM - lastPrintedPWM) > 10) {
        Serial.printf("üéØ Y1:%-4d ‚Üí –æ–±—Ä–∞–±:%-4d ‚Üí —É–≥–æ–ª:%-3d¬∞ | X1:%-4d ‚Üí PWM:%-3d\n", 
                     data.yAxis1, processedY1, currentAngle, data.xAxis1, motorPWM);
        lastPrintedAngle = currentAngle;
        lastPrintedPWM = motorPWM;
    }
}

void ServoManager::quickCalibrate() {
    elevatorServo.write(90);
    currentAngle = 90;
    ledcWrite(MOTOR_CHANNEL, 0);
    delay(100);
}

void ServoManager::emergencyStop() {
    elevatorServo.write(90);
    currentAngle = 90;
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::testSequence() {
    Serial.println("üéØ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π...");
    
    // –¢–µ—Å—Ç –≤—Å–µ—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π
    int testAngles[] = {0, 30, 60, 90, 120, 150, 180, 150, 120, 90, 60, 30, 0};
    
    for (int i = 0; i < 13; i++) {
        elevatorServo.write(testAngles[i]);
        currentAngle = testAngles[i];
        Serial.printf("üìç –£–≥–æ–ª: %d¬∞\n", testAngles[i]);
        delay(1000);
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å
    elevatorServo.write(90);
    currentAngle = 90;
    
    Serial.println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω");
}