#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è ESP32Servo
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    ESP32PWM::allocateTimer(2);
    ESP32PWM::allocateTimer(3);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    elevatorServo.setPeriodHertz(50);
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        servoAttached = true;
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        
        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        quickTest();
        currentAngle = 90;
        
    } else {
        Serial.println("‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        servoAttached = false;
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–∞
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ú–æ—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    Serial.println("üéØ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::safeServoWrite(int angle) {
    if (!servoAttached) return;
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    angle = constrain(angle, 0, 180);
    
    elevatorServo.write(angle);
    currentAngle = angle;
}

void ServoManager::update(const ControlData& data) {
    // –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê:
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ (-33)
    
    int targetAngle = 90; // –í—Å–µ–≥–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90¬∞
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    int yOffset = data.yAxis1 - JOYSTICK_NEUTRAL;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ä—Ç–≤—É—é –∑–æ–Ω—É –∫ –û–¢–ö–õ–û–ù–ï–ù–ò–Æ, –∞ –Ω–µ –∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    if (abs(yOffset) > JOYSTICK_DEADZONE) {
        if (yOffset > 0) {
            // –î–∂–æ–π—Å—Ç–∏–∫ –í–í–ï–†–• –æ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏
            targetAngle = map(yOffset, JOYSTICK_DEADZONE, 512 - JOYSTICK_NEUTRAL, 90, 180);
        } else {
            // –î–∂–æ–π—Å—Ç–∏–∫ –í–ù–ò–ó –æ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏  
            targetAngle = map(yOffset, -JOYSTICK_DEADZONE, -512 - JOYSTICK_NEUTRAL, 90, 0);
        }
    }
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≥–æ–ª (–±–µ–∑ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è!)
    safeServoWrite(targetAngle);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º
    int motorPWM = 0;
    int xOffset = data.xAxis1 - JOYSTICK_NEUTRAL; // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Å–∏ X
    
    if (abs(xOffset) > JOYSTICK_DEADZONE && xOffset > 0) {
        motorPWM = map(xOffset, JOYSTICK_DEADZONE, 512 - JOYSTICK_NEUTRAL, 0, 255);
    }
    motorPWM = constrain(motorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, motorPWM);
}

void ServoManager::debugJoystick(const ControlData& data) {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–µ–π—Ç—Ä–∞–ª–∏
    int yOffset = data.yAxis1 - JOYSTICK_NEUTRAL;
    int xOffset = data.xAxis1 - JOYSTICK_NEUTRAL;
    
    const char* yDirection = "–ù–ï–ô–¢–†–ê–õ–¨";
    if (yOffset > JOYSTICK_DEADZONE) yDirection = "–í–í–ï–†–•  ";
    else if (yOffset < -JOYSTICK_DEADZONE) yDirection = "–í–ù–ò–ó   ";
    
    const char* xDirection = "–ù–ï–ô–¢–†–ê–õ–¨";
    if (xOffset > JOYSTICK_DEADZONE) xDirection = "–í–ü–†–ê–í–û";
    else if (xOffset < -JOYSTICK_DEADZONE) xDirection = "–í–õ–ï–í–û ";
    
    Serial.printf("üéÆ Y1=%-4d(%+4d) %s | X1=%-4d(%+4d) %s | Servo=%d¬∞\n", 
                 data.yAxis1, yOffset, yDirection,
                 data.xAxis1, xOffset, xDirection,
                 currentAngle);
}

void ServoManager::quickCalibrate() {
    Serial.println("üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: —Å–µ—Ä–≤–æ=90¬∞, –º–æ—Ç–æ—Ä=0");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    delay(100);
}

void ServoManager::quickTest() {
    Serial.println("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
        return;
    }
    
    int testAngles[] = {0, 90, 180, 90};
    for (int i = 0; i < 4; i++) {
        safeServoWrite(testAngles[i]);
        Serial.printf("‚û°Ô∏è  %d¬∞\n", testAngles[i]);
        delay(300);
    }
    Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::emergencyStop() {
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::testSequence() {
    quickTest();
}

void ServoManager::setServoAngle(int angle) {
    if (!servoAttached) return;
    angle = constrain(angle, 0, 180);
    safeServoWrite(angle);
}

void ServoManager::setMotorSpeed(int speed) {
    speed = constrain(speed, 0, 255);
    ledcWrite(MOTOR_CHANNEL, speed);
}

bool ServoManager::isServoAttached() {
    return servoAttached;
}

void ServoManager::diagnostic() {
    Serial.println("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SERVOMANAGER:");
    Serial.printf("   –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥: %s\n", servoAttached ? "–ü–û–î–ö–õ–Æ–ß–ï–ù" : "–û–¢–ö–õ–Æ–ß–ï–ù");
    Serial.printf("   –¢–µ–∫—É—â–∏–π —É–≥–æ–ª: %d¬∞\n", currentAngle);
    Serial.printf("   –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞: %d\n", JOYSTICK_NEUTRAL);
    Serial.printf("   –ú–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞: %d\n", JOYSTICK_DEADZONE);
}