#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    Serial.print("üìç –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–∞ –ø–∏–Ω–µ: "); Serial.println(ELEVATOR_PIN);
    Serial.print("üìç –ú–æ—Ç–æ—Ä –Ω–∞ –ø–∏–Ω–µ: "); Serial.println(MOTOR_PIN);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è ESP32Servo
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    ESP32PWM::allocateTimer(2);
    ESP32PWM::allocateTimer(3);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    elevatorServo.setPeriodHertz(50);
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        servoAttached = true;
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        
        // –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –¢–ï–°–¢
        Serial.println("üß™ –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê:");
        Serial.println("‚û°Ô∏è  –£–≥–æ–ª 0¬∞");
        elevatorServo.write(0);
        delay(1500);
        
        Serial.println("‚û°Ô∏è  –£–≥–æ–ª 45¬∞");
        elevatorServo.write(45);
        delay(1500);
        
        Serial.println("‚û°Ô∏è  –£–≥–æ–ª 90¬∞ (–Ω–µ–π—Ç—Ä–∞–ª—å)");
        elevatorServo.write(90);
        delay(1500);
        
        Serial.println("‚û°Ô∏è  –£–≥–æ–ª 135¬∞");
        elevatorServo.write(135);
        delay(1500);
        
        Serial.println("‚û°Ô∏è  –£–≥–æ–ª 180¬∞");
        elevatorServo.write(180);
        delay(1500);
        
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        Serial.println("‚û°Ô∏è  –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å 90¬∞");
        elevatorServo.write(90);
        delay(500);
        
        Serial.println("üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –≥–æ—Ç–æ–≤");
    } else {
        Serial.println("‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        servoAttached = false;
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–∞
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ú–æ—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (PWM –∫–∞–Ω–∞–ª 0)");
    
    Serial.println("‚úÖ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::safeServoWrite(int angle) {
    if (!servoAttached) {
        return;
    }
    
    angle = constrain(angle, 0, 180);
    
    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–õ–¨–ö–û –ü–†–ò –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ú –ò–ó–ú–ï–ù–ï–ù–ò–ò –£–ì–õ–ê (>5¬∞)
    static int lastAngle = -1;
    if (abs(angle - lastAngle) > 5) {
        Serial.printf("üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–æ: %d¬∞ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π %d¬∞)\n", angle, lastAngle);
        lastAngle = angle;
    }
    
    elevatorServo.write(angle);
}

void ServoManager::update(const ControlData& data) {
    // –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –î–ñ–û–ô–°–¢–ò–ö–ê –í –£–ì–û–õ –°–ï–†–í–û–ü–†–ò–í–û–î–ê
    int angle = 90; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º deadzone –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä–æ–∂–∞–Ω–∏—è
    if (data.yAxis1 < -JOYSTICK_DEADZONE || data.yAxis1 > JOYSTICK_DEADZONE) {
        angle = map(data.yAxis1, -512, 512, 0, 180);
        angle = constrain(angle, 0, 180);
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º
    safeServoWrite(angle);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º —Å deadzone
    int motorPWM = 0;
    if (data.xAxis1 > JOYSTICK_DEADZONE) {
        motorPWM = map(data.xAxis1, JOYSTICK_DEADZONE, 512, 80, 255);
        motorPWM = constrain(motorPWM, 0, 255);
    }
    ledcWrite(MOTOR_CHANNEL, motorPWM);
    
    // –û–ì–†–ê–ù–ò–ß–ï–ù–ù–´–ô –í–´–í–û–î –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò (—Ä–∞–∑ –≤ 1000 –º—Å)
    static unsigned long lastServoDebug = 0;
    if (millis() - lastServoDebug > 1000) {
        Serial.printf("üîß SERVO: Y1=%-4d ‚Üí —É–≥–æ–ª=%-3d¬∞ | –ú–û–¢–û–†: X1=%-4d ‚Üí PWM=%-3d\n", 
                     data.yAxis1, angle, data.xAxis1, motorPWM);
        lastServoDebug = millis();
    }
}

void ServoManager::quickCalibrate() {
    Serial.println("üéØ –ë—ã—Å—Ç—Ä–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞: —Å–µ—Ä–≤–æ=90¬∞, –º–æ—Ç–æ—Ä=0");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    delay(1000);
}

void ServoManager::quickTest() {
    Serial.println("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞");
        return;
    }
    
    // –¢–µ—Å—Ç –∫—Ä–∞–π–Ω–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π
    Serial.println("‚û°Ô∏è  –¢–µ—Å—Ç: 0¬∞ (–º–∏–Ω)");
    safeServoWrite(0);
    delay(1000);
    
    Serial.println("‚û°Ô∏è  –¢–µ—Å—Ç: 90¬∞ (–Ω–µ–π—Ç—Ä–∞–ª—å)");
    safeServoWrite(90);
    delay(1000);
    
    Serial.println("‚û°Ô∏è  –¢–µ—Å—Ç: 180¬∞ (–º–∞–∫—Å)");
    safeServoWrite(180);
    delay(1000);
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    safeServoWrite(90);
    Serial.println("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::emergencyStop() {
    static unsigned long lastEmergencyCall = 0;
    unsigned long currentTime = millis();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (currentTime - lastEmergencyCall < 1000) {
        return;
    }
    lastEmergencyCall = currentTime;
    
    Serial.println("üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!");
    safeServoWrite(90); // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    ledcWrite(MOTOR_CHANNEL, 0); // –í—ã–∫–ª—é—á–∏—Ç—å –º–æ—Ç–æ—Ä
}

void ServoManager::testSequence() {
    Serial.println("üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê –ò –ú–û–¢–û–†–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —Ç–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω");
        return;
    }
    
    // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    int testAngles[] = {0, 45, 90, 135, 180, 90};
    const char* angleNames[] = {"MIN (0¬∞)", "45¬∞", "NEUTRAL (90¬∞)", "135¬∞", "MAX (180¬∞)", "NEUTRAL"};
    
    for (int i = 0; i < 6; i++) {
        safeServoWrite(testAngles[i]);
        Serial.printf("üìç %s: —É–≥–æ–ª=%d¬∞\n", angleNames[i], testAngles[i]);
        delay(2000);
    }
    
    // –¢–µ—Å—Ç –º–æ—Ç–æ—Ä–∞
    Serial.println("üîß –¢–µ—Å—Ç –º–æ—Ç–æ—Ä–∞...");
    int pwmValues[] = {0, 100, 180, 255, 0};
    for (int i = 0; i < 5; i++) {
        ledcWrite(MOTOR_CHANNEL, pwmValues[i]);
        Serial.printf("üöÄ PWM: %d/255\n", pwmValues[i]);
        delay(1500);
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}