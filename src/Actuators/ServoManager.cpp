#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    if (elevatorServo.attach(ELEVATOR_PIN)) {
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        elevatorServo.write(90);
        delay(500);
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞!");
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    
    Serial.println("‚úÖ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::update(const ControlData& data) {
    // –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê
    
    // 1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º –æ—Ç X1
    int targetAngle = map(data.yAxis1, -512, 512, 0, 180);
    targetAngle = constrain(targetAngle, 0, 180);
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º —É–≥–æ–ª
    elevatorServo.write(targetAngle);
    
    // 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –æ—Ç Y1
    int motorPWM = 0;
    if (data.yAxis1 > 50) {
        motorPWM = map(data.xAxis1, 50, 512, 80, 255);
    }
    motorPWM = constrain(motorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, motorPWM);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
    static int lastAngle = -1;
    static int lastPWM = -1;
    
    if (abs(targetAngle - lastAngle) > 5 || motorPWM != lastPWM) {
        Serial.printf("üéØ X1:%-4d ‚Üí —É–≥–æ–ª:%-3d¬∞ | Y1:%-4d ‚Üí PWM:%-3d\n", 
                     data.xAxis1, targetAngle, data.yAxis1, motorPWM);
        lastAngle = targetAngle;
        lastPWM = motorPWM;
    }
}

void ServoManager::quickCalibrate() {
    elevatorServo.write(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::emergencyStop() {
    elevatorServo.write(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::testSequence() {
    Serial.println("üéØ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    elevatorServo.write(0);
    delay(1000);
    elevatorServo.write(180);
    delay(1000);
    elevatorServo.write(90);
    delay(1000);
    
    Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}