#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    #if DEBUG_MODE
        Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
        Serial.printf("   –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥: –ø–∏–Ω %d\n", ELEVATOR_PIN);
        Serial.printf("   –î–≤–∏–≥–∞—Ç–µ–ª—å: –ø–∏–Ω %d\n", MOTOR_PIN);
    #endif
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–æ–≤
    if (!validatePins()) {
        return;
    }
    
    // 1. –°–ù–ê–ß–ê–õ–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    
    // 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SERVO –° –ü–†–û–°–¢–´–ú –ü–û–î–•–û–î–û–ú
    #if DEBUG_MODE
        Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    #endif
    
    // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    if (elevatorServo.attach(ELEVATOR_PIN, 500, 2500)) {
        #if DEBUG_MODE
            Serial.println("‚úÖ Servo –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º 500-2500 –º–∫—Å");
        #endif
    } else {
        // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if (elevatorServo.attach(ELEVATOR_PIN)) {
            #if DEBUG_MODE
                Serial.println("‚úÖ Servo –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º");
            #endif
        } else {
            #if DEBUG_MODE
                Serial.println("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Servo –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω!");
            #endif
            return;
        }
    }
    
    // 3. –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
    #if DEBUG_MODE
        Serial.println("üéØ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    #endif
    quickTest();
    
    // 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    #if DEBUG_MODE
        Serial.println("üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    #endif
    findServoRange();
    
    #if DEBUG_MODE
        Serial.println("‚úÖ ServoManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    #endif
}

void ServoManager::findServoRange() {
    #if DEBUG_MODE
        Serial.println("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    #endif
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
    int testPositions[] = {500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 
                          1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500};
    
    #if DEBUG_MODE
        Serial.println("   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏:");
    #endif
    
    for (int i = 0; i < sizeof(testPositions)/sizeof(testPositions[0]); i++) {
        elevatorServo.writeMicroseconds(testPositions[i]);
        #if DEBUG_MODE
            Serial.printf("      üìç %d –º–∫—Å\n", testPositions[i]);
        #endif
        delay(300); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–µ–π—Ç—Ä–∞–ª—å
    elevatorServo.writeMicroseconds(1500);
    delay(500);
    
    #if DEBUG_MODE
        Serial.println("‚úÖ –ü–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω");
    #endif
}

void ServoManager::quickTest() {
    #if DEBUG_MODE
        Serial.println("üîß –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    #endif
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤ –ø–æ–ª–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    elevatorServo.writeMicroseconds(500);
    delay(500);
    elevatorServo.writeMicroseconds(1500);
    delay(500);
    elevatorServo.writeMicroseconds(2500);
    delay(500);
    elevatorServo.writeMicroseconds(1500);
    delay(500);
    
    #if DEBUG_MODE
        Serial.println("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    #endif
}

void ServoManager::update(const ControlData& data) {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º
    int pulseWidth = mapToPulse(data.xAxis1);
    elevatorServo.writeMicroseconds(pulseWidth);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º
    int targetMotorPWM = mapToMotorPWM(data.yAxis1);
    
    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
    if (targetMotorPWM > currentMotorPWM) {
        currentMotorPWM += MOTOR_RAMP_UP_SPEED;
        if (currentMotorPWM > targetMotorPWM) currentMotorPWM = targetMotorPWM;
    } else if (targetMotorPWM < currentMotorPWM) {
        currentMotorPWM -= MOTOR_RAMP_DOWN_SPEED;
        if (currentMotorPWM < targetMotorPWM) currentMotorPWM = targetMotorPWM;
    }
    
    currentMotorPWM = constrain(currentMotorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, currentMotorPWM);
    
    #if DEBUG_MODE
        static unsigned long lastDebug = 0;
        if (millis() - lastDebug > 500) {
            Serial.printf("üéÆ X1:%-4d‚Üí—Å–µ—Ä–≤–æ:%-4d–º–∫—Å | Y1:%-4d‚Üí–¥–≤–∏–≥:PWM%-3d\n", 
                         data.xAxis1, pulseWidth, data.yAxis1, currentMotorPWM);
            lastDebug = millis();
        }
    #endif
}

void ServoManager::testSequence() {
    #if DEBUG_MODE
        Serial.println("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –¢–ï–°–¢–û–í–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò");
        Serial.println("==========================================");
    #endif
    
    // –¢–ï–°–¢ 1: –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞–π–Ω–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π
    #if DEBUG_MODE
        Serial.println("üîã –¢–µ—Å—Ç 1: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞–π–Ω–∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π");
    #endif
    
    // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    elevatorServo.writeMicroseconds(500);
    #if DEBUG_MODE
        Serial.println("   üìç MIN: 500 –º–∫—Å");
    #endif
    delay(2000);
    
    elevatorServo.writeMicroseconds(2500);
    #if DEBUG_MODE
        Serial.println("   üìç MAX: 2500 –º–∫—Å");
    #endif
    delay(2000);
    
    elevatorServo.writeMicroseconds(1500);
    #if DEBUG_MODE
        Serial.println("   üìç NEUTRAL: 1500 –º–∫—Å");
    #endif
    delay(1000);
    
    // –¢–ï–°–¢ 2: –ë—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
    #if DEBUG_MODE
        Serial.println("‚ö° –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É");
    #endif
    
    for (int i = 500; i <= 2500; i += 100) {
        elevatorServo.writeMicroseconds(i);
        #if DEBUG_MODE
            Serial.printf("   üìç –ü–æ–ª–æ–∂–µ–Ω–∏–µ: %d –º–∫—Å\n", i);
        #endif
        delay(200);
    }
    
    for (int i = 2500; i >= 500; i -= 100) {
        elevatorServo.writeMicroseconds(i);
        #if DEBUG_MODE
            Serial.printf("   üìç –ü–æ–ª–æ–∂–µ–Ω–∏–µ: %d –º–∫—Å\n", i);
        #endif
        delay(200);
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å
    elevatorServo.writeMicroseconds(1500);
    delay(1000);
    
    // –¢–ï–°–¢ 3: –†–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    #if DEBUG_MODE
        Serial.println("‚ö° –¢–µ—Å—Ç 3: –†–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è");
    #endif
    
    int testPositions[] = {500, 1500, 2500, 1500, 500, 1500};
    const char* positionNames[] = {"MIN", "NEUTRAL", "MAX", "NEUTRAL", "MIN", "NEUTRAL"};
    
    for(int i = 0; i < 6; i++) {
        elevatorServo.writeMicroseconds(testPositions[i]);
        #if DEBUG_MODE
            Serial.printf("   üîÑ %s: %d –º–∫—Å\n", positionNames[i], testPositions[i]);
        #endif
        delay(1000);
    }
    
    // –¢–ï–°–¢ 4: –î–≤–∏–≥–∞—Ç–µ–ª—å
    #if DEBUG_MODE
        Serial.println("üöÄ –¢–µ—Å—Ç 4: –î–≤–∏–≥–∞—Ç–µ–ª—å");
    #endif
    
    for(int pwm = 0; pwm <= 255; pwm += 50) {
        ledcWrite(MOTOR_CHANNEL, pwm);
        #if DEBUG_MODE
            Serial.printf("   üîß PWM –¥–≤–∏–≥–∞—Ç–µ–ª—è: %d/255\n", pwm);
        #endif
        delay(800);
    }
    ledcWrite(MOTOR_CHANNEL, 0);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    elevatorServo.writeMicroseconds(1500);
    
    #if DEBUG_MODE
        Serial.println("‚úÖ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´");
        Serial.println("==========================================");
    #endif
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
void ServoManager::applyMixer(const ControlData& data, int16_t& servoOutput, int16_t& motorOutput) {
    servoOutput = constrain(data.xAxis1, INPUT_MIN, INPUT_MAX);
    motorOutput = constrain(data.yAxis1, INPUT_MIN, INPUT_MAX);
    if (motorOutput < 0) motorOutput = 0;
}

int ServoManager::mapToPulse(int16_t value) {
    return map(value, INPUT_MIN, INPUT_MAX, SERVO_MIN_PULSE, SERVO_MAX_PULSE);
}

int ServoManager::mapToMotorPWM(int16_t value) {
    if (value < MOTOR_DEAD_ZONE) return 0;
    return map(value, MOTOR_DEAD_ZONE, INPUT_MAX, MOTOR_MIN_PWM, 255);
}

void ServoManager::quickCalibrate() {
    elevatorServo.writeMicroseconds(SERVO_NEUTRAL_PULSE);
    ledcWrite(MOTOR_CHANNEL, 0);
    currentMotorPWM = 0;
    delay(100);
}

void ServoManager::emergencyStop() {
    elevatorServo.writeMicroseconds(SERVO_NEUTRAL_PULSE);
    ledcWrite(MOTOR_CHANNEL, 0);
    currentMotorPWM = 0;
}

bool ServoManager::validatePins() {
    if (ELEVATOR_PIN == MOTOR_PIN) {
        #if DEBUG_MODE
            Serial.println("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–∏–Ω–æ–≤!");
        #endif
        return false;
    }
    #if DEBUG_MODE
        Serial.println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∏–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    #endif
    return true;
}