#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        elevatorServo.write(90); // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        delay(500);
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞!");
        return;
    }
    
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    
    Serial.println("‚úÖ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::update(const ControlData& data) {
    // –ü–†–Ø–ú–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï: –î–∂–æ–π—Å—Ç–∏–∫ ‚Üí –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥
    // Y1: -512 ‚Üí 0¬∞, 0 ‚Üí 90¬∞, 512 ‚Üí 180¬∞
    
    int angle = map(data.yAxis1, -512, 512, 0, 180);
    angle = constrain(angle, 0, 180);
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º —É–≥–æ–ª
    elevatorServo.write(angle);
    
    // –î–≤–∏–≥–∞—Ç–µ–ª—å –æ—Ç X1
    int motorPWM = 0;
    if (data.xAxis1 > 50) {
        motorPWM = map(data.xAxis1, 50, 512, 80, 255);
    }
    motorPWM = constrain(motorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, motorPWM);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    Serial.printf("üéØ Y1:%-4d ‚Üí —É–≥–æ–ª:%-3d¬∞ | X1:%-4d ‚Üí PWM:%-3d\n", 
                 data.yAxis1, angle, data.xAxis1, motorPWM);
}

void ServoManager::quickCalibrate() {
    elevatorServo.write(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::emergencyStop() {
    elevatorServo.write(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::testSequence() {
    Serial.println("üéØ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∂–æ–π—Å—Ç–∏–∫‚Üí—Å–µ—Ä–≤–æ...");
    
    // –¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    int testValues[] = {-512, -256, 0, 256, 512};
    const char* positions[] = {"MIN", "25%", "CENTER", "75%", "MAX"};
    
    for (int i = 0; i < 5; i++) {
        int angle = map(testValues[i], -512, 512, 0, 180);
        elevatorServo.write(angle);
        Serial.printf("üìç %s: Y1=%-4d ‚Üí —É–≥–æ–ª=%-3d¬∞\n", positions[i], testValues[i], angle);
        delay(1500);
    }
    
    elevatorServo.write(90);
    Serial.println("‚úÖ –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω");
}