#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è ESP32Servo
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    ESP32PWM::allocateTimer(2);
    ESP32PWM::allocateTimer(3);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    elevatorServo.setPeriodHertz(50);
    
    if (elevatorServo.attach(ELEVATOR_PIN, SG90_MIN_PULSE, SG90_MAX_PULSE)) {
        servoAttached = true;
        Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        
        // –¢–µ—Å—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
        Serial.println("üß™ –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê:");
        
        Serial.println("‚û°Ô∏è  0¬∞");
        elevatorServo.write(0);
        delay(800);
        
        Serial.println("‚û°Ô∏è  90¬∞");
        elevatorServo.write(90);
        delay(800);
        
        Serial.println("‚û°Ô∏è  180¬∞");
        elevatorServo.write(180);
        delay(800);
        
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        elevatorServo.write(90);
        delay(500);
        
        Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    } else {
        Serial.println("‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        servoAttached = false;
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–∞
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ú–æ—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    Serial.println("üéØ ServoManager –≥–æ—Ç–æ–≤");
}

void ServoManager::safeServoWrite(int angle) {
    if (!servoAttached) return;
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    angle = constrain(angle, 0, 180);
    
    // –£–ë–†–ê–ù –î–ï–ë–ê–ì - –æ–Ω –º–µ—à–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏—é
    elevatorServo.write(angle);
}

void ServoManager::update(const ControlData& data) {
    static int lastProcessedAngle = 90;
    static unsigned long lastUpdate = 0;
    int targetAngle = 90; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ü—Ä–∏–º–µ–Ω—è–µ–º deadzone
    if (abs(data.yAxis1) > JOYSTICK_DEADZONE) {
        // –ü–†–Ø–ú–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï: -512..+512 -> 0..180
        // –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, –ø–æ–º–µ–Ω—è–π—Ç–µ 0 –∏ 180 –º–µ—Å—Ç–∞–º–∏
        targetAngle = map(data.yAxis1, -512, 512, 180, 0);
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ):
        // targetAngle = map(data.yAxis1, -512, 512, 180, 0);
        
        targetAngle = constrain(targetAngle, 0, 180);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–∞
    int angleDiff = targetAngle - lastProcessedAngle;
    if (abs(angleDiff) > 10) {
        targetAngle = lastProcessedAngle + (angleDiff > 0 ? 10 : -10);
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º (–æ—Å—å X)
    int motorPWM = 0;
    if (data.xAxis1 > 80) {
        motorPWM = map(data.xAxis1, 80, 512, 100, 255);
    } else if (data.xAxis1 < -80) {
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        motorPWM = 0; // –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    }
    motorPWM = constrain(motorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, motorPWM);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (millis() - lastUpdate > 500) {
        Serial.printf("SERVO: %3d¬∞ (Y1=%-4d) | MOTOR: PWM=%-3d (X1=%-4d)\n", 
                     lastProcessedAngle, data.yAxis1, motorPWM, data.xAxis1);
        lastUpdate = millis();
    }
}

void ServoManager::quickCalibrate() {
    Serial.println("üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: —Å–µ—Ä–≤–æ=90¬∞, –º–æ—Ç–æ—Ä=0");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    delay(1000);
}

void ServoManager::quickTest() {
    Serial.println("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
        return;
    }
    
    int testAngles[] = {0, 90, 180, 90};
    for (int i = 0; i < 4; i++) {
        safeServoWrite(testAngles[i]);
        Serial.printf("‚û°Ô∏è  %d¬∞\n", testAngles[i]);
        delay(600);
    }
    Serial.println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::emergencyStop() {
    Serial.println("üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!");
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
}

void ServoManager::testSequence() {
    Serial.println("üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ï–†–í–û–ü–†–ò–í–û–î–ê –ò –ú–û–¢–û–†–ê...");
    
    if (!servoAttached) {
        Serial.println("‚ùå –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
        return;
    }
    
    // –¢–µ—Å—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    int testAngles[] = {0, 45, 90, 135, 180, 90};
    for (int i = 0; i < 6; i++) {
        safeServoWrite(testAngles[i]);
        Serial.printf("üìç –£–≥–æ–ª: %d¬∞\n", testAngles[i]);
        delay(800);
    }
    
    // –¢–µ—Å—Ç –º–æ—Ç–æ—Ä–∞
    int pwmValues[] = {0, 100, 180, 255, 0};
    for (int i = 0; i < 5; i++) {
        ledcWrite(MOTOR_CHANNEL, pwmValues[i]);
        Serial.printf("üöÄ PWM: %d/255\n", pwmValues[i]);
        delay(1000);
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    safeServoWrite(90);
    ledcWrite(MOTOR_CHANNEL, 0);
    Serial.println("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void ServoManager::setServoAngle(int angle) {
    if (!servoAttached) return;
    angle = constrain(angle, 0, 180);
    safeServoWrite(angle);
    Serial.printf("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É–≥–æ–ª: %d¬∞\n", angle);
}

void ServoManager::setMotorSpeed(int speed) {
    speed = constrain(speed, 0, 255);
    ledcWrite(MOTOR_CHANNEL, speed);
    Serial.printf("üöÄ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: %d/255\n", speed);
}

bool ServoManager::isServoAttached() {
    return servoAttached;
}

void ServoManager::diagnostic() {
    Serial.println("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SERVOMANAGER:");
    Serial.printf("   –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥: %s\n", servoAttached ? "–ü–û–î–ö–õ–Æ–ß–ï–ù" : "–û–¢–ö–õ–Æ–ß–ï–ù");
    Serial.printf("   –ü–∏–Ω —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞: %d\n", ELEVATOR_PIN);
    Serial.printf("   –ü–∏–Ω –º–æ—Ç–æ—Ä–∞: %d\n", MOTOR_PIN);
    Serial.printf("   –ö–∞–Ω–∞–ª PWM: %d\n", MOTOR_CHANNEL);
    Serial.printf("   Deadzone: %d\n", JOYSTICK_DEADZONE);
}