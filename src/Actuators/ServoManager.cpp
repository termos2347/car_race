#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::begin() {
    #if DEBUG_MODE
        Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServoManager...");
        Serial.printf("   –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥: –ø–∏–Ω %d\n", ELEVATOR_PIN);
        Serial.printf("   –î–≤–∏–≥–∞—Ç–µ–ª—å: –ø–∏–Ω %d\n", MOTOR_PIN);
    #endif
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–æ–≤
    if (!validatePins()) {
        return;
    }
    
    // –¢–ï–°–¢ –°–ò–ì–ù–ê–õ–ê –ù–ê –ü–ò–ù–ê–• –ë–ï–ó –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
    #if DEBUG_MODE
        Serial.println("üéØ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏–Ω–∞–º–∏...");
    #endif
    
    // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PWM –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    testDirectPWM();
    
    // –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Servo
    #if DEBUG_MODE
        Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Servo...");
    #endif
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    
    elevatorServo.setPeriodHertz(50);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–º–ø—É–ª—å—Å–æ–≤
    bool attached = false;
    int ranges[][2] = {{500, 2500}, {1000, 2000}, {800, 2200}};
    
    for(int i = 0; i < 3; i++) {
        attached = elevatorServo.attach(ELEVATOR_PIN, ranges[i][0], ranges[i][1]);
        if(attached) {
            #if DEBUG_MODE
                Serial.printf("‚úÖ Servo –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º %d-%d –º–∫—Å\n", ranges[i][0], ranges[i][1]);
            #endif
            break;
        } else {
            #if DEBUG_MODE
                Serial.printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º %d-%d –º–∫—Å\n", ranges[i][0], ranges[i][1]);
            #endif
        }
    }
    
    if(!attached) {
        #if DEBUG_MODE
            Serial.println("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Servo –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω!");
        #endif
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è
    ledcSetup(MOTOR_CHANNEL, MOTOR_FREQ, MOTOR_RESOLUTION);
    ledcAttachPin(MOTOR_PIN, MOTOR_CHANNEL);
    ledcWrite(MOTOR_CHANNEL, 0);
    
    #if DEBUG_MODE
        Serial.println("‚úÖ ServoManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    #endif
}

void ServoManager::testDirectPWM() {
    #if DEBUG_MODE
        Serial.println("üîå –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ PWM –Ω–∞ –ø–∏–Ω–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞...");
    #endif
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PWM –≤—Ä—É—á–Ω—É—é
    ledcSetup(8, 50, 16); // –ö–∞–Ω–∞–ª 8, 50Hz, 16 –±–∏—Ç
    ledcAttachPin(ELEVATOR_PIN, 8);
    
    // –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ PWM (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Servo –±–∏–±–ª–∏–æ—Ç–µ–∫–µ)
    int positions[] = {500, 1500, 2500, 1500};
    const char* positionNames[] = {"MIN", "NEUTRAL", "MAX", "NEUTRAL"};
    
    for(int i = 0; i < 4; i++) {
        int pulseWidth = positions[i];
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ –≤ duty cycle –¥–ª—è 50Hz
        uint32_t duty = (pulseWidth * 65535) / 20000;
        
        ledcWrite(8, duty);
        #if DEBUG_MODE
            Serial.printf("   üìç %s: %d –º–∫—Å (duty: %d)\n", positionNames[i], pulseWidth, duty);
        #endif
        delay(2000);
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ä—É—á–Ω–æ–π PWM
    ledcDetachPin(ELEVATOR_PIN);
    #if DEBUG_MODE
        Serial.println("‚úÖ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ PWM –∑–∞–≤–µ—Ä—à–µ–Ω");
    #endif
}

void ServoManager::update(const ControlData& data) {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º
    int pulseWidth = mapToPulse(data.xAxis1);
    elevatorServo.writeMicroseconds(pulseWidth);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º
    int targetMotorPWM = mapToMotorPWM(data.yAxis1);
    
    // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
    if (targetMotorPWM > currentMotorPWM) {
        currentMotorPWM += MOTOR_RAMP_UP_SPEED;
        if (currentMotorPWM > targetMotorPWM) currentMotorPWM = targetMotorPWM;
    } else if (targetMotorPWM < currentMotorPWM) {
        currentMotorPWM -= MOTOR_RAMP_DOWN_SPEED;
        if (currentMotorPWM < targetMotorPWM) currentMotorPWM = targetMotorPWM;
    }
    
    currentMotorPWM = constrain(currentMotorPWM, 0, 255);
    ledcWrite(MOTOR_CHANNEL, currentMotorPWM);
    
    #if DEBUG_MODE
        static unsigned long lastDebug = 0;
        if (millis() - lastDebug > 500) {
            Serial.printf("üéÆ X1:%-4d‚Üí—Å–µ—Ä–≤–æ:%-4d–º–∫—Å | Y1:%-4d‚Üí–¥–≤–∏–≥:PWM%-3d\n", 
                         data.xAxis1, pulseWidth, data.yAxis1, currentMotorPWM);
            lastDebug = millis();
        }
    #endif
}

void ServoManager::testSequence() {
    #if DEBUG_MODE
        Serial.println("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –¢–ï–°–¢–û–í–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò");
        Serial.println("==========================================");
    #endif
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ç–∞–Ω–∏—è - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    #if DEBUG_MODE
        Serial.println("üîã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ç–∞–Ω–∏—è (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)");
    #endif
    
    for (int i = 1500; i >= 1000; i -= 10) {
        elevatorServo.writeMicroseconds(i);
        #if DEBUG_MODE
            Serial.printf("   üìç –ü–æ–ª–æ–∂–µ–Ω–∏–µ: %d –º–∫—Å\n", i);
        #endif
        delay(100);
    }
    delay(1000);
    
    for (int i = 1000; i <= 2000; i += 10) {
        elevatorServo.writeMicroseconds(i);
        #if DEBUG_MODE
            Serial.printf("   üìç –ü–æ–ª–æ–∂–µ–Ω–∏–µ: %d –º–∫—Å\n", i);
        #endif
        delay(100);
    }
    delay(1000);
    
    // –¢–µ—Å—Ç 2: –†–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏)
    #if DEBUG_MODE
        Serial.println("‚ö° –¢–µ—Å—Ç 2: –†–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏)");
    #endif
    
    int testPositions[] = {1000, 1500, 2000, 1500, 1000, 1500};
    
    for(int i = 0; i < 6; i++) {
        elevatorServo.writeMicroseconds(testPositions[i]);
        #if DEBUG_MODE
            Serial.printf("   üîÑ –†–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: %d –º–∫—Å\n", testPositions[i]);
        #endif
        delay(1000);
    }
    
    // –¢–µ—Å—Ç 3: –î–≤–∏–≥–∞—Ç–µ–ª—å
    #if DEBUG_MODE
        Serial.println("üöÄ –¢–µ—Å—Ç 3: –î–≤–∏–≥–∞—Ç–µ–ª—å");
    #endif
    
    for(int pwm = 0; pwm <= 255; pwm += 50) {
        ledcWrite(MOTOR_CHANNEL, pwm);
        #if DEBUG_MODE
            Serial.printf("   üîß PWM –¥–≤–∏–≥–∞—Ç–µ–ª—è: %d/255\n", pwm);
        #endif
        delay(1000);
    }
    ledcWrite(MOTOR_CHANNEL, 0);
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å
    elevatorServo.writeMicroseconds(1500);
    
    #if DEBUG_MODE
        Serial.println("‚úÖ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´");
        Serial.println("==========================================");
    #endif
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
void ServoManager::applyMixer(const ControlData& data, int16_t& servoOutput, int16_t& motorOutput) {
    servoOutput = constrain(data.xAxis1, INPUT_MIN, INPUT_MAX);
    motorOutput = constrain(data.yAxis1, INPUT_MIN, INPUT_MAX);
    if (motorOutput < 0) motorOutput = 0;
}

int ServoManager::mapToPulse(int16_t value) {
    return map(value, INPUT_MIN, INPUT_MAX, SERVO_MIN_PULSE, SERVO_MAX_PULSE);
}

int ServoManager::mapToMotorPWM(int16_t value) {
    if (value < MOTOR_DEAD_ZONE) return 0;
    return map(value, MOTOR_DEAD_ZONE, INPUT_MAX, MOTOR_MIN_PWM, 255);
}

void ServoManager::quickCalibrate() {
    elevatorServo.writeMicroseconds(SERVO_NEUTRAL_PULSE);
    ledcWrite(MOTOR_CHANNEL, 0);
    currentMotorPWM = 0;
    delay(100);
}

void ServoManager::emergencyStop() {
    elevatorServo.writeMicroseconds(SERVO_NEUTRAL_PULSE);
    ledcWrite(MOTOR_CHANNEL, 0);
    currentMotorPWM = 0;
}

bool ServoManager::validatePins() {
    if (ELEVATOR_PIN == MOTOR_PIN) {
        #if DEBUG_MODE
            Serial.println("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–∏–Ω–æ–≤!");
        #endif
        return false;
    }
    #if DEBUG_MODE
        Serial.println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∏–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    #endif
    return true;
}