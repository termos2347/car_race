#include "ServoManager.h"
#include <Arduino.h>

void ServoManager::initializeServos() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    servos[0] = {Servo(), 12, false, 1000, 2000}; // Servo 0 - Y –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 1)
    servos[1] = {Servo(), 27, false, 1000, 2000}; // Servo 1 - Y –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 1)
    servos[2] = {Servo(), 13, false, 1000, 2000}; // Servo 2 - X –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 1)
    servos[3] = {Servo(), 14, false, 1000, 2000}; // Servo 3 - X –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 1)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    servos[4] = {Servo(), 15, false, 1000, 2000}; // Servo 4 - Y –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 2)
    servos[5] = {Servo(), 16, false, 1000, 2000}; // Servo 5 - Y –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 2)
    servos[6] = {Servo(), 17, false, 1000, 2000}; // Servo 6 - X –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 2)
    servos[7] = {Servo(), 18, false, 1000, 2000}; // Servo 7 - X –æ—Å—å (–¥–∂–æ–π—Å—Ç–∏–∫ 2)
}

void ServoManager::begin() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤...");
    
    initializeServos();
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è ESP32
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    ESP32PWM::allocateTimer(2);
    ESP32PWM::allocateTimer(3);
    
    for(int i = 0; i < 8; i++) {
        servos[i].servo.setPeriodHertz(50); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–≤
        servos[i].servo.attach(servos[i].pin, 
                              servos[i].minPulse, 
                              servos[i].maxPulse);
        servos[i].servo.write(90); // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        delay(100);
    }
    
    Serial.println("‚úÖ –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (8 —à—Ç)");
}

void ServoManager::update(const ControlData& data) {
    int16_t outputs[8];
    applyMixer(data, outputs);
    
    for (int i = 0; i < 8; i++) {
        servos[i].servo.writeMicroseconds(mapToPulse(outputs[i], servos[i].reversed));
    }
}

void ServoManager::applyMixer(const ControlData& data, int16_t outputs[8]) {
    // –ü–µ—Ä–≤—ã–π –¥–∂–æ–π—Å—Ç–∏–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏ 0-3
    // –í—Ç–æ—Ä–æ–π –¥–∂–æ–π—Å—Ç–∏–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏ 4-7

    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
    // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–∂–æ–π—Å—Ç–∏–∫–∞:
    // X –æ—Å—å: –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥ -> —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã 2 –∏ 3
    // Y –æ—Å—å: –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ -> —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã 0 –∏ 1

    // –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–∂–æ–π—Å—Ç–∏–∫–∞:
    // X –æ—Å—å: –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥ -> —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã 6 –∏ 7
    // Y –æ—Å—å: –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ -> —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã 4 –∏ 5

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    int16_t x1 = constrain(data.xAxis1, -512, 512);
    int16_t y1 = constrain(data.yAxis1, -512, 512);
    int16_t x2 = constrain(data.xAxis2, -512, 512);
    int16_t y2 = constrain(data.yAxis2, -512, 512);

    // –ü–µ—Ä–≤—ã–π –¥–∂–æ–π—Å—Ç–∏–∫
    outputs[0] = y1; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 0 - Y –æ—Å—å
    outputs[1] = y1; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 1 - Y –æ—Å—å
    outputs[2] = x1; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 2 - X –æ—Å—å
    outputs[3] = x1; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 3 - X –æ—Å—å

    // –í—Ç–æ—Ä–æ–π –¥–∂–æ–π—Å—Ç–∏–∫
    outputs[4] = y2; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 4 - Y –æ—Å—å
    outputs[5] = y2; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 5 - Y –æ—Å—å
    outputs[6] = x2; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 6 - X –æ—Å—å
    outputs[7] = x2; // –°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ 7 - X –æ—Å—å
}

int ServoManager::mapToPulse(int16_t value, bool reverse) {
    if (reverse) {
        value = -value;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ -512..512 –≤ 1000..2000 –º–∫—Å
    return map(value, -512, 512, 1000, 2000);
}

void ServoManager::setReverse(uint8_t servoIndex, bool reverse) {
    if (servoIndex < 8) {
        servos[servoIndex].reversed = reverse;
    }
}

void ServoManager::calibrate() {
    Serial.println("üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤...");
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    for(int i = 0; i < 8; i++) {
        servos[i].servo.writeMicroseconds(1500);
    }
    delay(1000);
    
    Serial.println("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (8 —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤)");
}