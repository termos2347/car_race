#include "ESPNowManager.h"
#include <Arduino.h>

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
static ESPNowManager* espNowInstance = nullptr;

void ESPNowManager::begin() {
    WiFi.mode(WIFI_STA);
    
    if (esp_now_init() != ESP_OK) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ESP-NOW");
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –î–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback
    espNowInstance = this;
    
    esp_now_register_recv_cb(onDataReceived);
    
    // –í—ã–≤–æ–¥ MAC –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è
    Serial.print("üì° MAC –ø—Ä–∏–µ–º–Ω–∏–∫–∞: ");
    Serial.println(WiFi.macAddress());
    
    Serial.println("‚úÖ ESP-NOW –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
}

void ESPNowManager::registerCallback(DataReceivedCallback callback) {
    dataCallback = callback;
    Serial.println("‚úÖ Callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ ESPNowManager");
}

bool ESPNowManager::addPeer(const uint8_t* macAddress) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, macAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;
    
    if (esp_now_add_peer(&peerInfo) == ESP_OK) {
        Serial.print("‚úÖ Peer –¥–æ–±–∞–≤–ª–µ–Ω: ");
        for (int i = 0; i < 6; i++) {
            Serial.print(macAddress[i], HEX);
            if (i < 5) Serial.print(":");
        }
        Serial.println();
        return true;
    } else {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è peer —á–µ—Ä–µ–∑ ESPNowManager");
        return false;
    }
}

void ESPNowManager::onDataReceived(const uint8_t* mac, const uint8_t* data, int len) {
    if (len != sizeof(ControlData)) {
        Serial.printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç: %d –±–∞–π—Ç\n", len);
        return;
    }
    
    ControlData receivedData;
    memcpy(&receivedData, data, sizeof(receivedData));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è CRC
    uint16_t calculatedCRC = 0;
    const uint8_t* bytes = (const uint8_t*)&receivedData;
    for(size_t i = 0; i < sizeof(ControlData) - sizeof(uint16_t); i++) {
        calculatedCRC += bytes[i];
    }
    
    if (calculatedCRC != receivedData.crc) {
        return; // –¢–∏—Ö–∏–π —Å–±—Ä–æ—Å –ø–∞–∫–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π CRC
    }
    
    // –í—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–∏
    if (espNowInstance != nullptr && espNowInstance->dataCallback != nullptr) {
        espNowInstance->dataCallback(receivedData);
    }
    
    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–≤—è–∑–∏
    static unsigned long lastStablePrint = 0;
    static int packetCount = 0;
    packetCount++;
    
    if (millis() - lastStablePrint > 10000) {
        Serial.printf("üì° ESP-NOW: %d –ø–∞–∫–µ—Ç–æ–≤/10—Å–µ–∫\n", packetCount);
        lastStablePrint = millis();
        packetCount = 0;
    }
}